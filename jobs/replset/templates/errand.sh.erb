#!/bin/bash
set -e

JOB_NAME="replset"
export LOG_DIR=/var/vcap/sys/log/$JOB_NAME
export TMP_DIR=/var/vcap/sys/tmp/$JOB_NAME
for dir in $LOG_DIR $TMP_DIR
do
  mkdir -p ${dir}
  chown vcap:vcap ${dir}
  chmod 775 ${dir}
done

MONGO_PORT='<%= p("mongodb.net.port") %>'
MONGO_CMD="/var/vcap/packages/mongodb/bin/mongo"


<% p("mongodb.replSet").each do |rs| %>

TMP_SCRIPT="${TMP_DIR}/replSet_<%= rs['name'] %>.js"

echo -e "\n\n============== Creating replica set for \"<%= rs['name'] %>\" =============="

echo -e "\n\n==== Looking for mongodb primary ===="
MONGO_PRIMARY=`${MONGO_CMD} <%= rs['members'].flatten.first %>:${MONGO_PORT}/admin --quiet --eval 'db.isMaster().primary'`

if [ -n "$MONGO_PRIMARY" ]; then
  echo "Primary found: ${MONGO_PRIMARY}"
  MONGO_REPLSET_CONF="rs.reconfig(cfg);"
else
  MONGO_PRIMARY="<%= rs['members'].flatten.first %>:${MONGO_PORT}"
  MONGO_REPLSET_CONF="rs.initiate(cfg);"
  echo "Replica set do not exists, swithing primary to: ${MONGO_PRIMARY}"
fi


cat << EOF > $TMP_SCRIPT
cfg =
{
  "_id" : "<%= rs['name'] %>",
  "version" : 1,
  "members" : [<% rs['members'].flatten.each_with_index do |server,index| %>
    { "_id" : <%= index %>, "host" : "<%= server %>" }<% if index < rs['members'].flatten.size - 1 %>,<% end %><% end %>
  ]
};
${MONGO_REPLSET_CONF}
EOF

echo -e "\n\n==== generated configuration ===="
cat $TMP_SCRIPT

echo -e "\n\n==== Running replica set config on primary ===="
${MONGO_CMD} ${MONGO_PRIMARY}/admin $TMP_SCRIPT

sleep 20
echo -e "\n\n==== Replica set status ===="
${MONGO_CMD} ${MONGO_PRIMARY}/admin --eval 'printjson(rs.status())'

TMP_SCRIPT=
MONGO_PRIMARY=
MONGO_REPLSET_CONF=
<% end %>
